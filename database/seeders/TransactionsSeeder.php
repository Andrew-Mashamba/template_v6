<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class TransactionsSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        // Disable foreign key checks
        if (DB::getDriverName() === 'mysql') {
            DB::statement('SET FOREIGN_KEY_CHECKS=0;');
        } elseif (DB::getDriverName() === 'pgsql') {
            DB::statement('SET session_replication_role = replica;');
        }
        
        try {
        // Clear existing data
        DB::table('transactions')->truncate();

        // Insert sample data (table was empty)
        $data = [
            [
                'id' => 1,
                'transaction_uuid' => Str::uuid(),
                'client_number' => '000001',
                'account_id' => 1,
                'amount' => 1000,
                'currency' => 'TZS',
                'type' => 'standard',
                'transaction_category' => 'Sample transaction_category 1',
                'transaction_subcategory' => 'Sample transaction_subcategory 1',
                'source' => 'Sample source 1',
                'service_name' => 'Sample service_name',
                'raw_payload' => 'Sample raw_payload 1',
                'received_at' => null,
                'channel_id' => 1,
                'sp_code' => 'TRA001',
                'gateway_ref' => 'Sample gateway_ref 1',
                'biller_receipt' => 'Sample biller_receipt 1',
                'payment_type' => 'TYPE_B',
                'channel_code' => 'TRA001',
                'payer_name' => 'Sample payer_name',
                'payer_phone' => '255700000001',
                'payer_email' => 'sample1@transactions.com',
                'extra_fields' => json_encode(['value' => 'Sample extra_fields 1']),
                'narration' => 'Sample narration 1',
                'description' => 'This is a sample description for transactions record 1',
                'reference' => 'Sample reference 1',
                'external_reference' => 'Sample external_reference 1',
                'correlation_id' => Str::uuid(),
                'status' => 'PENDING',
                'reconciliation_status' => 'UNRECONCILED',
                'balance_before' => 1000,
                'balance_after' => 1000,
                'running_balance' => 1000,
                'external_system' => 'Sample external_system 1',
                'external_system_version' => 'Sample external_system_version 1',
                'external_transaction_id' => 1,
                'external_request_payload' => json_encode([]),
                'external_response_payload' => json_encode([]),
                'external_status_code' => 'PENDING',
                'external_status_message' => 'PENDING',
                'initiated_at' => null,
                'processed_at' => now(),
                'completed_at' => now(),
                'failed_at' => null,
                'reversed_at' => null,
                'reconciled_at' => now(),
                'last_retry_at' => null,
                'next_retry_at' => null,
                'retry_count' => 10,
                'error_code' => 'TRA001',
                'error_message' => 'Sample error_message 1',
                'error_details' => 'Sample error_details 1',
                'error_context' => json_encode(['value' => 'This is a sample text field for transactions record 1. It contains some sample content to demonstrate the seeder functionality.']),
                'failure_reason' => 'Sample failure_reason 1',
                'reversal_reason' => 'Sample reversal_reason 1',
                'reversal_notes' => 'Sample reversal_notes 1',
                'approved_by' => 1,
                'reversed_by' => 1,
                'client_ip' => '192.168.1.1',
                'user_agent' => 'Sample user_agent 1',
                'session_id' => Str::uuid(),
                'is_manual' => false,
                'is_system_generated' => false,
                'requires_approval' => true,
                'is_approved' => false,
                'approved_at' => now(),
                'approval_notes' => 'Sample approval_notes 1',
                'metadata' => json_encode(['source' => 'seeder', 'version' => '1.0']),
                'tags' => json_encode(['value' => 'Sample tags 1']),
                'batch_id' => Str::uuid(),
                'process_id' => Str::uuid(),
                'processing_time_ms' => 100,
                'queue_name' => 'Sample queue_name',
                'job_id' => Str::uuid(),
                'regulatory_category' => 'Sample regulatory_category 1',
                'reporting_period' => 'Sample reporting_period 1',
                'is_suspicious' => false,
                'risk_level' => 'Sample risk_level 1',
                'created_at' => '2025-07-23 10:38:44',
                'updated_at' => now(),
                'deleted_at' => null,
                'lookup_reference' => 'Sample lookup_reference 1',
                'lookup_status' => 'PENDING',
                'lookup_error_code' => 'TRA001',
                'lookup_error_message' => 'Sample lookup_error_message 1',
                'lookup_request_payload' => json_encode(['data' => 'Sample lookup_request_payload']),
                'lookup_response_payload' => json_encode(['data' => 'Sample lookup_response_payload']),
                'lookup_performed_at' => null,
                'lookup_processing_time_ms' => 50,
                'lookup_account_name' => 'Sample lookup_account_name',
                'lookup_account_type' => 10,
                'lookup_bank_name' => 'Sample lookup_bank_name',
                'lookup_bank_code' => 'TRA001',
                'lookup_wallet_provider' => 1,
                'lookup_phone_number' => '255700000001',
                'lookup_account_number' => 10,
                'lookup_identity_type' => 1,
                'lookup_identity_value' => 1,
                'lookup_validated' => true,
                'lookup_validation_status' => 'validated',
                'lookup_validation_notes' => 'Sample validation notes',
            ],
            [
                'id' => 2,
                'transaction_uuid' => Str::uuid(),
                'client_number' => '000002',
                'account_id' => 2,
                'amount' => 2000,
                'currency' => 'TZS',
                'type' => 'standard',
                'transaction_category' => 'Sample transaction_category 2',
                'transaction_subcategory' => 'Sample transaction_subcategory 2',
                'source' => 'Sample source 2',
                'service_name' => 'Sample service_name',
                'raw_payload' => 'Sample raw_payload 2',
                'received_at' => null,
                'channel_id' => 2,
                'sp_code' => 'TRA002',
                'gateway_ref' => 'Sample gateway_ref 2',
                'biller_receipt' => 'Sample biller_receipt 2',
                'payment_type' => 'TYPE_C',
                'channel_code' => 'TRA002',
                'payer_name' => 'Sample payer_name',
                'payer_phone' => '255700000002',
                'payer_email' => 'sample2@transactions.com',
                'extra_fields' => json_encode(['value' => 'Sample extra_fields 2']),
                'narration' => 'Sample narration 2',
                'description' => 'This is a sample description for transactions record 2',
                'reference' => 'Sample reference 2',
                'external_reference' => 'Sample external_reference 2',
                'correlation_id' => Str::uuid(),
                'status' => 'COMPLETED',
                'reconciliation_status' => 'UNRECONCILED',
                'balance_before' => 2000,
                'balance_after' => 2000,
                'running_balance' => 2000,
                'external_system' => 'Sample external_system 2',
                'external_system_version' => 'Sample external_system_version 2',
                'external_transaction_id' => 2,
                'external_request_payload' => json_encode([]),
                'external_response_payload' => json_encode([]),
                'external_status_code' => 'INACTIVE',
                'external_status_message' => 'INACTIVE',
                'initiated_at' => null,
                'processed_at' => now(),
                'completed_at' => now(),
                'failed_at' => null,
                'reversed_at' => null,
                'reconciled_at' => now(),
                'last_retry_at' => null,
                'next_retry_at' => null,
                'retry_count' => 20,
                'error_code' => 'TRA002',
                'error_message' => 'Sample error_message 2',
                'error_details' => 'Sample error_details 2',
                'error_context' => json_encode(['value' => 'This is a sample text field for transactions record 2. It contains some sample content to demonstrate the seeder functionality.']),
                'failure_reason' => 'Sample failure_reason 2',
                'reversal_reason' => 'Sample reversal_reason 2',
                'reversal_notes' => 'Sample reversal_notes 2',
                'approved_by' => 1,
                'reversed_by' => 1,
                'client_ip' => '192.168.1.1',
                'user_agent' => 'Sample user_agent 2',
                'session_id' => Str::uuid(),
                'is_manual' => true,
                'is_system_generated' => true,
                'requires_approval' => true,
                'is_approved' => true,
                'approved_at' => now(),
                'approval_notes' => 'Sample approval_notes 2',
                'metadata' => json_encode(['source' => 'seeder', 'version' => '1.0']),
                'tags' => json_encode(['value' => 'Sample tags 2']),
                'batch_id' => Str::uuid(),
                'process_id' => Str::uuid(),
                'processing_time_ms' => 100,
                'queue_name' => 'Sample queue_name',
                'job_id' => Str::uuid(),
                'regulatory_category' => 'Sample regulatory_category 2',
                'reporting_period' => 'Sample reporting_period 2',
                'is_suspicious' => true,
                'risk_level' => 'Sample risk_level 2',
                'created_at' => '2025-07-23 11:38:44',
                'updated_at' => now(),
                'deleted_at' => null,
                'lookup_reference' => 'Sample lookup_reference 2',
                'lookup_status' => 'INACTIVE',
                'lookup_error_code' => 'TRA002',
                'lookup_error_message' => 'Sample lookup_error_message 2',
                'lookup_request_payload' => json_encode(['data' => 'Sample lookup_request_payload']),
                'lookup_response_payload' => json_encode(['data' => 'Sample lookup_response_payload']),
                'lookup_performed_at' => null,
                'lookup_processing_time_ms' => 50,
                'lookup_account_name' => 'Sample lookup_account_name',
                'lookup_account_type' => 20,
                'lookup_bank_name' => 'Sample lookup_bank_name',
                'lookup_bank_code' => 'TRA002',
                'lookup_wallet_provider' => 2,
                'lookup_phone_number' => '255700000002',
                'lookup_account_number' => 20,
                'lookup_identity_type' => 2,
                'lookup_identity_value' => 2,
                'lookup_validated' => true,
                'lookup_validation_status' => 'validated',
                'lookup_validation_notes' => 'Sample validation notes',
            ],
        ];

        foreach ($data as $row) {
            DB::table('transactions')->insert($row);
        }
        
        } finally {
            // Re-enable foreign key checks
            if (DB::getDriverName() === 'mysql') {
                DB::statement('SET FOREIGN_KEY_CHECKS=1;');
            } elseif (DB::getDriverName() === 'pgsql') {
                DB::statement('SET session_replication_role = DEFAULT;');
            }
        }
    }
}