<?php

namespace App\Http\Livewire\Accounting;

use App\Models\AccountsModel;
use App\Models\general_ledger;
use App\Models\Receivable;
use App\Models\ClientsModel;
use App\Services\BalanceSheetItemIntegrationService;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Livewire\Component;
use Livewire\WithPagination;
use Livewire\WithFileUploads;
use Carbon\Carbon;

class TradeAndOtherReceivables extends Component
{
    use WithPagination, WithFileUploads;

    // View Control
    public $activeTab = 'overview';
    public $showCreateModal = false;
    public $showPaymentModal = false;
    public $showDetailsModal = false;
    public $editMode = false;
    
    // Search and Filters
    public $search = '';
    public $statusFilter = 'all';
    public $ageFilter = 'all';
    public $customerFilter = '';
    public $dateFrom;
    public $dateTo;
    
    // Receivable Form Data
    public $receivableId;
    public $customer_id;
    public $customer_name = '';
    public $customer_email = '';
    public $customer_phone = '';
    public $invoice_number = '';
    public $invoice_date;
    public $amount = 0;
    public $vat_amount = 0;
    public $total_amount = 0;
    public $currency = 'TZS';
    public $due_date;
    public $payment_terms = 30;
    public $description = '';
    
    // Account selection for proper flow
    public $parent_account_number; // Parent account to create receivable account under
    public $other_account_id; // The other account for double-entry (Revenue - credit side)
    public $reference_number = '';
    public $account_id;
    public $income_account_id;
    public $notes = '';
    public $status = 'pending';
    
    // Payment Form Data
    public $payment_receivable_id;
    public $payment_amount = 0;
    public $payment_date;
    public $payment_method = 'bank_transfer';
    public $payment_reference = '';
    public $payment_account_id;
    public $payment_notes = '';
    public $bank_charges = 0;
    public $discount_amount = 0;
    
    // Bad Debt Provision
    public $provision_rate = 0;
    public $provision_amount = 0;
    public $provision_notes = '';
    
    // File Uploads
    public $invoice_attachment;
    public $payment_receipt;
    public $supporting_documents = [];
    
    // Statistics
    public $totalReceivables = 0;
    public $totalOverdue = 0;
    public $totalCollected = 0;
    public $totalBadDebt = 0;
    public $averageCollectionPeriod = 0;
    public $agingBuckets = [];
    
    // Collections
    public $customers = [];
    public $receivableAccounts = [];
    public $incomeAccounts = [];
    public $bankAccounts = [];
    
    protected $rules = [
        'customer_name' => 'required|min:3',
        'invoice_number' => 'required|unique:receivables,invoice_number',
        'invoice_date' => 'required|date',
        'amount' => 'required|numeric|min:0',
        'due_date' => 'required|date|after_or_equal:invoice_date',
        'account_id' => 'required|exists:accounts,id',
        'income_account_id' => 'required|exists:accounts,id',
        'currency' => 'required|in:TZS,USD,EUR,GBP',
        'payment_terms' => 'required|integer|min:0',
        'vat_amount' => 'nullable|numeric|min:0',
        'invoice_attachment' => 'nullable|file|mimes:pdf,jpg,jpeg,png|max:5120',
    ];
    
    protected $listeners = [
        'refreshReceivables' => 'loadStatistics',
        'deleteReceivable' => 'delete',
        'writeOffReceivable' => 'writeOff',
    ];
    
    public function mount()
    {
        $this->initializeData();
        $this->loadStatistics();
        $this->invoice_date = now()->format('Y-m-d');
        $this->payment_date = now()->format('Y-m-d');
        $this->dateFrom = now()->startOfMonth()->format('Y-m-d');
        $this->dateTo = now()->endOfMonth()->format('Y-m-d');
    }
    
    public function initializeData()
    {
        // Load customers
        $this->customers = ClientsModel::where('status', 'ACTIVE')
            ->orderBy('first_name')
            ->get();
        
        // Load receivable accounts (Asset accounts)
        $this->receivableAccounts = AccountsModel::where('account_type', 'ASSET')
            ->where(function($query) {
                $query->where('account_name', 'like', '%receivable%')
                      ->orWhere('account_name', 'like', '%debtor%');
            })
            ->where('status', 'ACTIVE')
            ->orderBy('account_name')
            ->get();
        
        // Load income accounts
        $this->incomeAccounts = AccountsModel::where('account_type', 'REVENUE')
            ->where('status', 'ACTIVE')
            ->orderBy('account_name')
            ->get();
        
        // Load bank accounts for payments
        $this->bankAccounts = AccountsModel::where('is_bank_account', true)
            ->where('status', 'ACTIVE')
            ->orderBy('account_name')
            ->get();
    }
    
    public function loadStatistics()
    {
        $query = DB::table('trade_receivables');
        
        // Apply date filters
        if ($this->dateFrom) {
            $query->where('invoice_date', '>=', $this->dateFrom);
        }
        if ($this->dateTo) {
            $query->where('invoice_date', '<=', $this->dateTo);
        }
        
        // Calculate totals
        $this->totalReceivables = $query->sum('amount');
        
        $this->totalOverdue = DB::table('trade_receivables')
            ->where('due_date', '<', now())
            ->where('status', '!=', 'paid')
            ->sum('balance');
        
        $this->totalCollected = DB::table('trade_receivables')
            ->where('status', 'paid')
            ->sum('paid_amount');
        
        $this->totalBadDebt = DB::table('trade_receivables')
            ->where('status', 'written_off')
            ->sum('balance');
        
        // Calculate average collection period (using PostgreSQL syntax)
        $avgDays = DB::table('trade_receivables')
            ->where('status', 'paid')
            ->whereNotNull('updated_at')
            ->selectRaw('AVG(DATE_PART(\'day\', updated_at - invoice_date)) as avg_days')
            ->value('avg_days');
        
        $this->averageCollectionPeriod = round($avgDays ?? 0);
        
        // Calculate aging buckets
        $this->calculateAgingBuckets();
    }
    
    public function calculateAgingBuckets()
    {
        $today = Carbon::now();
        
        $this->agingBuckets = [
            'current' => [
                'label' => 'Current',
                'amount' => 0,
                'count' => 0,
                'percentage' => 0
            ],
            '30_days' => [
                'label' => '1-30 Days',
                'amount' => 0,
                'count' => 0,
                'percentage' => 0
            ],
            '60_days' => [
                'label' => '31-60 Days',
                'amount' => 0,
                'count' => 0,
                'percentage' => 0
            ],
            '90_days' => [
                'label' => '61-90 Days',
                'amount' => 0,
                'count' => 0,
                'percentage' => 0
            ],
            '120_days' => [
                'label' => '91-120 Days',
                'amount' => 0,
                'count' => 0,
                'percentage' => 0
            ],
            'over_120' => [
                'label' => 'Over 120 Days',
                'amount' => 0,
                'count' => 0,
                'percentage' => 0
            ]
        ];
        
        $receivables = DB::table('trade_receivables')
            ->where('status', '!=', 'paid')
            ->where('status', '!=', 'written_off')
            ->get();
        
        $totalOutstanding = 0;
        
        foreach ($receivables as $receivable) {
            $daysOverdue = $today->diffInDays(Carbon::parse($receivable->due_date), false);
            $amount = $receivable->balance;
            $totalOutstanding += $amount;
            
            if ($daysOverdue >= 0) {
                $this->agingBuckets['current']['amount'] += $amount;
                $this->agingBuckets['current']['count']++;
            } elseif ($daysOverdue >= -30) {
                $this->agingBuckets['30_days']['amount'] += $amount;
                $this->agingBuckets['30_days']['count']++;
            } elseif ($daysOverdue >= -60) {
                $this->agingBuckets['60_days']['amount'] += $amount;
                $this->agingBuckets['60_days']['count']++;
            } elseif ($daysOverdue >= -90) {
                $this->agingBuckets['90_days']['amount'] += $amount;
                $this->agingBuckets['90_days']['count']++;
            } elseif ($daysOverdue >= -120) {
                $this->agingBuckets['120_days']['amount'] += $amount;
                $this->agingBuckets['120_days']['count']++;
            } else {
                $this->agingBuckets['over_120']['amount'] += $amount;
                $this->agingBuckets['over_120']['count']++;
            }
        }
        
        // Calculate percentages
        if ($totalOutstanding > 0) {
            foreach ($this->agingBuckets as $key => &$bucket) {
                $bucket['percentage'] = round(($bucket['amount'] / $totalOutstanding) * 100, 2);
            }
        }
    }
    
    public function updatedAmount()
    {
        $this->calculateTotal();
    }
    
    public function updatedVatAmount()
    {
        $this->calculateTotal();
    }
    
    public function calculateTotal()
    {
        $this->total_amount = $this->amount + $this->vat_amount;
    }
    
    public function updatedPaymentTerms()
    {
        if ($this->invoice_date && $this->payment_terms) {
            $this->due_date = Carbon::parse($this->invoice_date)
                ->addDays($this->payment_terms)
                ->format('Y-m-d');
        }
    }
    
    public function updatedInvoiceDate()
    {
        $this->updatedPaymentTerms();
    }
    
    public function updatedCustomerId()
    {
        if ($this->customer_id) {
            $customer = Client::find($this->customer_id);
            if ($customer) {
                $this->customer_name = $customer->first_name . ' ' . $customer->middle_name . ' ' . $customer->last_name;
                $this->customer_email = $customer->email;
                $this->customer_phone = $customer->phone_number;
            }
        }
    }
    
    public function openCreateModal()
    {
        $this->reset(['receivableId', 'customer_id', 'customer_name', 'customer_email', 
                     'customer_phone', 'invoice_number', 'amount', 'vat_amount', 
                     'total_amount', 'description', 'reference_number', 'notes']);
        
        $this->editMode = false;
        $this->invoice_date = now()->format('Y-m-d');
        $this->generateInvoiceNumber();
        $this->showCreateModal = true;
    }
    
    public function generateInvoiceNumber()
    {
        $prefix = 'INV';
        $year = date('Y');
        $month = date('m');
        
        $lastInvoice = DB::table('trade_receivables')
            ->where('invoice_number', 'like', "$prefix-$year$month-%")
            ->orderBy('invoice_number', 'desc')
            ->first();
        
        if ($lastInvoice) {
            $lastNumber = intval(substr($lastInvoice->invoice_number, -4));
            $newNumber = str_pad($lastNumber + 1, 4, '0', STR_PAD_LEFT);
        } else {
            $newNumber = '0001';
        }
        
        $this->invoice_number = "$prefix-$year$month-$newNumber";
    }
    
    public function save()
    {
        $this->validate();
        
        DB::beginTransaction();
        try {
            // Prepare data
            $data = [
                'customer_id' => $this->customer_id,
                'customer_name' => $this->customer_name,
                'invoice_number' => $this->invoice_number,
                'invoice_date' => $this->invoice_date,
                'due_date' => $this->due_date,
                'amount' => $this->total_amount,  // total amount maps to amount
                'paid_amount' => 0,  // initially no payment
                'balance' => $this->total_amount,  // initial balance equals total
                'description' => $this->description,
                'status' => 'pending',
                'created_by' => auth()->id(),
                'updated_by' => auth()->id(),
                'created_at' => now(),
                'updated_at' => now(),
            ];
            
            // Handle file upload
            if ($this->invoice_attachment) {
                $path = $this->invoice_attachment->store('receivables/invoices', 'public');
                $data['invoice_attachment'] = $path;
            }
            
            if ($this->editMode && $this->receivableId) {
                // Update existing receivable
                DB::table('trade_receivables')
                    ->where('id', $this->receivableId)
                    ->update($data);
                
                $message = 'Receivable updated successfully!';
            } else {
                // Create new receivable
                $receivableId = DB::table('trade_receivables')->insertGetId($data);
                
                // Use Balance Sheet Integration Service to create accounts and post to GL
                $integrationService = new BalanceSheetItemIntegrationService();
                
                try {
                    $receivable = (object) array_merge($data, ['id' => $receivableId]);
                    $integrationService->createTradeReceivableAccount(
                        $receivable,
                        $this->parent_account_number,  // Parent account to create receivable account under
                        $this->other_account_id        // The other account for double-entry (Revenue - credit side)
                    );
                    
                    Log::info('Trade receivable integrated with accounts table', [
                        'receivable_id' => $receivableId,
                        'customer' => $this->customer_name,
                        'amount' => $this->total_amount
                    ]);
                } catch (\Exception $e) {
                    Log::error('Failed to integrate receivable with accounts table: ' . $e->getMessage());
                }
                
                $message = 'Receivable created successfully!';
            }
            
            DB::commit();
            
            $this->showCreateModal = false;
            $this->loadStatistics();
            $this->dispatchBrowserEvent('alert', [
                'type' => 'success',
                'message' => $message
            ]);
            
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Error saving receivable: ' . $e->getMessage());
            
            $this->dispatchBrowserEvent('alert', [
                'type' => 'error',
                'message' => 'Error saving receivable: ' . $e->getMessage()
            ]);
        }
    }
    
    private function createGLEntries($receivableId, $data)
    {
        $reference = 'REC-' . $data['invoice_number'];
        $description = 'Invoice ' . $data['invoice_number'] . ' - ' . $data['customer_name'];
        
        // Debit Accounts Receivable
        general_ledger::create([
            'reference_number' => $reference,
            'transaction_type' => 'RECEIVABLE',
            'transaction_date' => $data['invoice_date'],
            'account_id' => $data['account_id'],
            'debit_amount' => $data['amount'],
            'credit_amount' => 0,
            'description' => $description,
            'created_by' => auth()->id(),
            'status' => 'POSTED',
            'source_id' => $receivableId,
            'source_type' => 'trade_receivables'
        ]);
        
        // Credit Income Account
        general_ledger::create([
            'reference_number' => $reference,
            'transaction_type' => 'RECEIVABLE',
            'transaction_date' => $data['invoice_date'],
            'account_id' => $data['income_account_id'],
            'debit_amount' => 0,
            'credit_amount' => $data['amount'],
            'description' => $description,
            'created_by' => auth()->id(),
            'status' => 'POSTED',
            'source_id' => $receivableId,
            'source_type' => 'trade_receivables'
        ]);
        
        // Credit VAT if applicable
        if ($data['vat_amount'] > 0) {
            $vatAccount = AccountsModel::where('account_name', 'like', '%VAT%')
                ->where('account_type', 'LIABILITY')
                ->first();
            
            if ($vatAccount) {
                general_ledger::create([
                    'reference_number' => $reference,
                    'transaction_type' => 'RECEIVABLE',
                    'transaction_date' => $data['invoice_date'],
                    'account_id' => $vatAccount->id,
                    'debit_amount' => 0,
                    'credit_amount' => $data['vat_amount'],
                    'description' => 'VAT on ' . $description,
                    'created_by' => auth()->id(),
                    'status' => 'POSTED',
                    'source_id' => $receivableId,
                    'source_type' => 'trade_receivables'
                ]);
            }
        }
    }
    
    public function openPaymentModal($receivableId)
    {
        $receivable = DB::table('trade_receivables')->find($receivableId);
        
        if ($receivable) {
            $this->payment_receivable_id = $receivableId;
            $this->payment_amount = $receivable->balance;
            $this->payment_date = now()->format('Y-m-d');
            $this->payment_method = 'bank_transfer';
            $this->showPaymentModal = true;
        }
    }
    
    public function processPayment()
    {
        $this->validate([
            'payment_amount' => 'required|numeric|min:0',
            'payment_date' => 'required|date',
            'payment_method' => 'required',
            'payment_account_id' => 'required|exists:accounts,id',
        ]);
        
        DB::beginTransaction();
        try {
            $receivable = DB::table('trade_receivables')->find($this->payment_receivable_id);
            
            if (!$receivable) {
                throw new \Exception('Receivable not found');
            }
            
            // Use Balance Sheet Integration Service for collection
            $integrationService = new BalanceSheetItemIntegrationService();
            $integrationService->processReceivableCollection($receivable, $this->payment_amount);
            
            // Calculate new balance
            $newBalance = $receivable->balance - $this->payment_amount - $this->discount_amount;
            $totalPaid = $receivable->paid_amount + $this->payment_amount;
            
            // Update receivable
            DB::table('trade_receivables')
                ->where('id', $this->payment_receivable_id)
                ->update([
                    'balance' => max(0, $newBalance),
                    'paid_amount' => $totalPaid,
                    'status' => $newBalance <= 0 ? 'paid' : 'partial',
                    'updated_by' => auth()->id(),
                    'updated_at' => now(),
                ]);
            
            // Record payment
            $paymentId = DB::table('receivable_payments')->insertGetId([
                'receivable_id' => $this->payment_receivable_id,
                'payment_date' => $this->payment_date,
                'amount' => $this->payment_amount,
                'payment_method' => $this->payment_method,
                'reference_number' => $this->payment_reference,
                'bank_charges' => $this->bank_charges,
                'discount_amount' => $this->discount_amount,
                'notes' => $this->payment_notes,
                'created_by' => auth()->id(),
                'created_at' => now(),
            ]);
            
            // Handle file upload
            if ($this->payment_receipt) {
                $path = $this->payment_receipt->store('receivables/payments', 'public');
                DB::table('receivable_payments')
                    ->where('id', $paymentId)
                    ->update(['receipt_attachment' => $path]);
            }
            
            // Create GL entries for payment
            $this->createPaymentGLEntries($receivable, $paymentId);
            
            DB::commit();
            
            $this->showPaymentModal = false;
            $this->reset(['payment_amount', 'payment_reference', 'payment_notes', 
                         'bank_charges', 'discount_amount']);
            $this->loadStatistics();
            
            $this->dispatchBrowserEvent('alert', [
                'type' => 'success',
                'message' => 'Payment processed successfully!'
            ]);
            
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Error processing payment: ' . $e->getMessage());
            
            $this->dispatchBrowserEvent('alert', [
                'type' => 'error',
                'message' => 'Error processing payment: ' . $e->getMessage()
            ]);
        }
    }
    
    private function createPaymentGLEntries($receivable, $paymentId)
    {
        $reference = 'PAY-' . str_pad($paymentId, 6, '0', STR_PAD_LEFT);
        $description = 'Payment for Invoice ' . $receivable->invoice_number;
        
        // Debit Bank/Cash Account
        general_ledger::create([
            'reference_number' => $reference,
            'transaction_type' => 'PAYMENT',
            'transaction_date' => $this->payment_date,
            'account_id' => $this->payment_account_id,
            'debit_amount' => $this->payment_amount - $this->bank_charges,
            'credit_amount' => 0,
            'description' => $description,
            'created_by' => auth()->id(),
            'status' => 'POSTED',
            'source_id' => $paymentId,
            'source_type' => 'receivable_payments'
        ]);
        
        // Credit Accounts Receivable
        general_ledger::create([
            'reference_number' => $reference,
            'transaction_type' => 'PAYMENT',
            'transaction_date' => $this->payment_date,
            'account_id' => $receivable->account_id,
            'debit_amount' => 0,
            'credit_amount' => $this->payment_amount,
            'description' => $description,
            'created_by' => auth()->id(),
            'status' => 'POSTED',
            'source_id' => $paymentId,
            'source_type' => 'receivable_payments'
        ]);
        
        // Record bank charges if any
        if ($this->bank_charges > 0) {
            $bankChargesAccount = AccountsModel::where('account_name', 'like', '%bank charges%')
                ->where('account_type', 'EXPENSE')
                ->first();
            
            if ($bankChargesAccount) {
                general_ledger::create([
                    'reference_number' => $reference,
                    'transaction_type' => 'PAYMENT',
                    'transaction_date' => $this->payment_date,
                    'account_id' => $bankChargesAccount->id,
                    'debit_amount' => $this->bank_charges,
                    'credit_amount' => 0,
                    'description' => 'Bank charges for ' . $description,
                    'created_by' => auth()->id(),
                    'status' => 'POSTED',
                    'source_id' => $paymentId,
                    'source_type' => 'receivable_payments'
                ]);
            }
        }
        
        // Record discount if any
        if ($this->discount_amount > 0) {
            $discountAccount = AccountsModel::where('account_name', 'like', '%discount%')
                ->where('account_type', 'EXPENSE')
                ->first();
            
            if ($discountAccount) {
                general_ledger::create([
                    'reference_number' => $reference,
                    'transaction_type' => 'PAYMENT',
                    'transaction_date' => $this->payment_date,
                    'account_id' => $discountAccount->id,
                    'debit_amount' => $this->discount_amount,
                    'credit_amount' => 0,
                    'description' => 'Discount on ' . $description,
                    'created_by' => auth()->id(),
                    'status' => 'POSTED',
                    'source_id' => $paymentId,
                    'source_type' => 'receivable_payments'
                ]);
                
                // Also credit receivables for discount
                general_ledger::create([
                    'reference_number' => $reference,
                    'transaction_type' => 'PAYMENT',
                    'transaction_date' => $this->payment_date,
                    'account_id' => $receivable->account_id,
                    'debit_amount' => 0,
                    'credit_amount' => $this->discount_amount,
                    'description' => 'Discount adjustment for ' . $description,
                    'created_by' => auth()->id(),
                    'status' => 'POSTED',
                    'source_id' => $paymentId,
                    'source_type' => 'receivable_payments'
                ]);
            }
        }
    }
    
    public function edit($id)
    {
        $receivable = DB::table('trade_receivables')->find($id);
        
        if ($receivable) {
            $this->receivableId = $id;
            $this->customer_id = $receivable->customer_id;
            $this->customer_name = $receivable->customer_name;
            $this->customer_email = $receivable->customer_email;
            $this->customer_phone = $receivable->customer_phone;
            $this->invoice_number = $receivable->invoice_number;
            $this->invoice_date = $receivable->invoice_date;
            $this->due_date = $receivable->due_date;
            $this->amount = $receivable->amount;
            $this->vat_amount = $receivable->vat_amount;
            $this->total_amount = $receivable->amount;
            $this->currency = $receivable->currency;
            $this->payment_terms = $receivable->payment_terms;
            $this->description = $receivable->description;
            $this->reference_number = $receivable->reference_number;
            $this->account_id = $receivable->account_id;
            $this->income_account_id = $receivable->income_account_id;
            $this->notes = $receivable->notes;
            
            $this->editMode = true;
            $this->showCreateModal = true;
        }
    }
    
    public function delete($id)
    {
        DB::beginTransaction();
        try {
            // Check if receivable has payments
            $hasPayments = DB::table('receivable_payments')
                ->where('receivable_id', $id)
                ->exists();
            
            if ($hasPayments) {
                throw new \Exception('Cannot delete receivable with payments. Please reverse payments first.');
            }
            
            // Delete GL entries
            general_ledger::where('source_type', 'trade_receivables')
                ->where('source_id', $id)
                ->delete();
            
            // Delete receivable
            DB::table('trade_receivables')->where('id', $id)->delete();
            
            DB::commit();
            
            $this->loadStatistics();
            
            $this->dispatchBrowserEvent('alert', [
                'type' => 'success',
                'message' => 'Receivable deleted successfully!'
            ]);
            
        } catch (\Exception $e) {
            DB::rollBack();
            
            $this->dispatchBrowserEvent('alert', [
                'type' => 'error',
                'message' => $e->getMessage()
            ]);
        }
    }
    
    public function writeOff($id)
    {
        DB::beginTransaction();
        try {
            $receivable = DB::table('trade_receivables')->find($id);
            
            if (!$receivable) {
                throw new \Exception('Receivable not found');
            }
            
            // Update receivable status
            DB::table('trade_receivables')
                ->where('id', $id)
                ->update([
                    'status' => 'written_off',
                    'write_off_date' => now(),
                    'write_off_reason' => $this->provision_notes,
                    'updated_by' => auth()->id(),
                    'updated_at' => now(),
                ]);
            
            // Create GL entries for write-off
            $reference = 'WO-' . $receivable->invoice_number;
            $description = 'Write-off Invoice ' . $receivable->invoice_number;
            
            // Debit Bad Debt Expense
            $badDebtAccount = AccountsModel::where('account_name', 'like', '%bad debt%')
                ->where('account_type', 'EXPENSE')
                ->first();
            
            if ($badDebtAccount) {
                general_ledger::create([
                    'reference_number' => $reference,
                    'transaction_type' => 'WRITE_OFF',
                    'transaction_date' => now(),
                    'account_id' => $badDebtAccount->id,
                    'debit_amount' => $receivable->balance,
                    'credit_amount' => 0,
                    'description' => $description,
                    'created_by' => auth()->id(),
                    'status' => 'POSTED',
                    'source_id' => $id,
                    'source_type' => 'trade_receivables'
                ]);
                
                // Credit Accounts Receivable
                general_ledger::create([
                    'reference_number' => $reference,
                    'transaction_type' => 'WRITE_OFF',
                    'transaction_date' => now(),
                    'account_id' => $receivable->account_id,
                    'debit_amount' => 0,
                    'credit_amount' => $receivable->balance,
                    'description' => $description,
                    'created_by' => auth()->id(),
                    'status' => 'POSTED',
                    'source_id' => $id,
                    'source_type' => 'trade_receivables'
                ]);
            }
            
            DB::commit();
            
            $this->loadStatistics();
            
            $this->dispatchBrowserEvent('alert', [
                'type' => 'success',
                'message' => 'Receivable written off successfully!'
            ]);
            
        } catch (\Exception $e) {
            DB::rollBack();
            
            $this->dispatchBrowserEvent('alert', [
                'type' => 'error',
                'message' => 'Error writing off receivable: ' . $e->getMessage()
            ]);
        }
    }
    
    public function exportToExcel()
    {
        // Export functionality would be implemented here
        $this->dispatchBrowserEvent('alert', [
            'type' => 'info',
            'message' => 'Export functionality will be implemented'
        ]);
    }
    
    public function sendReminder($id)
    {
        // Send payment reminder functionality
        $this->dispatchBrowserEvent('alert', [
            'type' => 'info',
            'message' => 'Reminder sent successfully!'
        ]);
    }
    
    public function render()
    {
        $query = DB::table('trade_receivables')
            ->select([
                'trade_receivables.*',
                DB::raw("DATE_PART('day', CURRENT_DATE - trade_receivables.due_date) as days_overdue")
            ]);
        
        // Apply filters
        if ($this->search) {
            $query->where(function($q) {
                $q->where('trade_receivables.customer_name', 'like', '%' . $this->search . '%')
                  ->orWhere('trade_receivables.invoice_number', 'like', '%' . $this->search . '%')
                  ->orWhere('trade_receivables.description', 'like', '%' . $this->search . '%');
            });
        }
        
        if ($this->statusFilter && $this->statusFilter !== 'all') {
            $query->where('trade_receivables.status', $this->statusFilter);
        }
        
        if ($this->ageFilter && $this->ageFilter !== 'all') {
            $today = Carbon::now();
            switch($this->ageFilter) {
                case 'current':
                    $query->where('trade_receivables.due_date', '>=', $today);
                    break;
                case '30':
                    $query->whereBetween('trade_receivables.due_date', [$today->copy()->subDays(30), $today]);
                    break;
                case '60':
                    $query->whereBetween('trade_receivables.due_date', [$today->copy()->subDays(60), $today->copy()->subDays(31)]);
                    break;
                case '90':
                    $query->whereBetween('trade_receivables.due_date', [$today->copy()->subDays(90), $today->copy()->subDays(61)]);
                    break;
                case 'over90':
                    $query->where('trade_receivables.due_date', '<', $today->copy()->subDays(90));
                    break;
            }
        }
        
        if ($this->dateFrom) {
            $query->where('trade_receivables.invoice_date', '>=', $this->dateFrom);
        }
        
        if ($this->dateTo) {
            $query->where('trade_receivables.invoice_date', '<=', $this->dateTo);
        }
        
        $receivables = $query->orderBy('trade_receivables.created_at', 'desc')
            ->paginate(10);
        
        // Get accounts for account selection
        $parentAccounts = DB::table('accounts')
            ->where('major_category_code', '1000') // Asset accounts
            ->where('account_level', '<=', 2) // Parent level accounts only
            ->where(function($query) {
                $query->where('account_name', 'LIKE', '%RECEIVABLE%')
                      ->orWhere('account_name', 'LIKE', '%DEBTOR%')
                      ->orWhere('account_name', 'LIKE', '%ASSET%');
            })
            ->where('status', 'ACTIVE')
            ->orderBy('account_name')
            ->get();
            
        $otherAccounts = DB::table('accounts')
            ->where('major_category_code', '4000') // Revenue accounts
            ->where(function($query) {
                $query->where('account_name', 'LIKE', '%Revenue%')
                      ->orWhere('account_name', 'LIKE', '%Sales%')
                      ->orWhere('account_name', 'LIKE', '%Income%');
            })
            ->where('status', 'ACTIVE')
            ->orderBy('account_name')
            ->get();

        return view('livewire.accounting.trade-and-other-receivables', [
            'receivables' => $receivables,
            'parentAccounts' => $parentAccounts,
            'otherAccounts' => $otherAccounts
        ]);
    }
}