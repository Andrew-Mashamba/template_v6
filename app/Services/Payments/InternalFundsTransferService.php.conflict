<?php

namespace App\Services\Payments;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;
use Exception;

/**
 * Internal Funds Transfer (IFT) Service
 * Handles transfers between SACCOS accounts and member accounts within NBC Bank
 */
class InternalFundsTransferService
{
    protected string $baseUrl;
    protected string $apiKey;
    protected string $clientId;
    protected array $transactionLog = [];

    public function __construct()
    {
        // Use NBC Internal Fund Transfer configuration instead of NBC Payments
        $this->baseUrl = config('services.nbc_internal_fund_transfer.base_url');
        $this->apiKey = config('services.nbc_internal_fund_transfer.api_key');
        $this->clientId = config('services.nbc_internal_fund_transfer.channel_id');
        
        $this->logInfo('IFT Service initialized', [
            'base_url' => $this->baseUrl,
            'client_id' => $this->clientId
        ]);
    }

    /**
     * Perform account lookup before transfer
     * Makes real API call to NBC for account validation
     * 
     * @param string $accountNumber
     * @param string $accountType 'source' or 'destination'
     * @return array
     */
    public function lookupAccount(string $accountNumber, string $accountType = 'destination'): array
    {
        $startTime = microtime(true);
        $this->logInfo("Starting account lookup via NBC API", [
            'account' => $accountNumber,
            'type' => $accountType
        ]);

        try {
            // Validate account format
            if (!$this->validateAccountNumber($accountNumber)) {
                throw new Exception("Invalid account number format");
            }

<<<<<<< HEAD
            // Prepare lookup request payload
            $payload = [
                'accountNumber' => $accountNumber,
                'channelId' => $this->clientId
            ];

            // Use the account lookup service endpoint
            $lookupUrl = config('services.account_details.base_url', 'http://cbpuat.intra.nbc.co.tz:9004/api/v1/account-lookup');
            $lookupPayload = [
                'accountNumber' => $accountNumber,
                'channelCode' => config('services.account_details.channel_code', 'SACCOSNBC'),
                'channelName' => config('services.account_details.channel_name', 'NBC_SACCOS')
            ];
            
            $lookupResponse = Http::withHeaders([
                'Content-Type' => 'application/json',
                'x-api-key' => config('services.account_details.api_key'),  // lowercase as per NBC documentation
            ])->withOptions(['verify' => false])
              ->timeout(30)
              ->post($lookupUrl, $lookupPayload);
            
            $response = [
                'success' => $lookupResponse->successful(),
                'data' => $lookupResponse->json() ?? []
            ];
            
            $duration = round((microtime(true) - $startTime) * 1000, 2);
            
            if ($response['success']) {
                $accountData = $response['data'];
                
                $this->logInfo("Account validated successfully via API", [
                    'account' => $accountNumber,
=======
            // For IFT, query internal account database
            // NBC internal accounts are validated locally
            // Account format: 12 digits starting with 011 or 060
            
            $duration = round((microtime(true) - $startTime) * 1000, 2);
            
            // Query actual account from database or internal API
            try {
                // Real implementation would query internal NBC account database
                $accountData = $this->queryInternalAccount($accountNumber);
                
                if (!$accountData) {
                    throw new \Exception("Account not found");
                }
                
                $this->logInfo("Internal account validated successfully", [
                    'account' => $accountNumber,
                    'name' => $accountData['account_name'] ?? 'Unknown',
                    'branch' => $accountData['branch_name'] ?? 'Unknown',
>>>>>>> 494cbd19507a5101ba0284d2bb2ac8f1f9206c55
                    'duration_ms' => $duration
                ]);

                return [
                    'success' => true,
                    'account_number' => $accountNumber,
<<<<<<< HEAD
                    'account_name' => $accountData['accountName'] ?? 'NBC Account',
                    'account_status' => $accountData['status'] ?? 'ACTIVE',
                    'branch_code' => $accountData['branchCode'] ?? substr($accountNumber, 0, 3),
                    'branch_name' => $accountData['branchName'] ?? 'NBC Branch',
                    'currency' => $accountData['currency'] ?? 'TZS',
                    'can_receive' => $accountData['canReceive'] ?? true,
                    'can_debit' => $accountData['canDebit'] ?? ($accountType === 'source'),
                    'response_time' => $duration
                ];
            } else {
                // If validation API fails, use basic validation
                $this->logWarning("API validation failed, using basic validation", [
                    'account' => $accountNumber,
                    'api_error' => $response['message']
                ]);
                
                // Return basic validation result
                return [
                    'success' => true,
                    'account_number' => $accountNumber,
                    'account_name' => 'NBC Account Holder',
                    'account_status' => 'ACTIVE',
                    'branch_code' => substr($accountNumber, 0, 3),
                    'branch_name' => 'NBC Branch',
                    'currency' => 'TZS',
                    'can_receive' => true,
                    'can_debit' => $accountType === 'source',
                    'response_time' => $duration,
                    'validation_type' => 'basic'
=======
                    'account_name' => $accountData['account_name'] ?? 'Unknown',
                    'account_status' => $accountData['status'] ?? 'ACTIVE',
                    'branch_code' => $accountData['branch_code'] ?? substr($accountNumber, 0, 3),
                    'branch_name' => $accountData['branch_name'] ?? 'Unknown',
                    'currency' => 'TZS',
                    'can_receive' => true,
                    'can_debit' => $accountType === 'source',
                    'response_time' => $duration
                ];
            } catch (\Exception $e) {
                $this->logError("Internal account lookup failed", [
                    'account' => $accountNumber,
                    'error' => $e->getMessage()
                ]);
                
                return [
                    'success' => false,
                    'error' => 'Account verification failed',
                    'message' => $e->getMessage()
>>>>>>> 494cbd19507a5101ba0284d2bb2ac8f1f9206c55
                ];
            }

        } catch (Exception $e) {
            $this->logError("Account lookup failed", [
                'account' => $accountNumber,
                'error' => $e->getMessage(),
                'duration_ms' => round((microtime(true) - $startTime) * 1000, 2)
            ]);

            return [
                'success' => false,
                'error' => $e->getMessage(),
                'account_number' => $accountNumber
            ];
        }
    }

    /**
     * Perform Internal Funds Transfer using real NBC API
     * 
     * @param array $transferData
     * @return array
     */
    public function transfer(array $transferData): array
    {
        $startTime = microtime(true);
        $reference = $this->generateReference('IFT');
        
        $this->logInfo("Starting IFT transfer via NBC API", [
            'reference' => $reference,
            'from_account' => $transferData['from_account'],
            'to_account' => $transferData['to_account'],
            'amount' => $transferData['amount']
        ]);

        try {
            // Validate required fields
            $this->validateTransferData($transferData);

            // Step 1: Validate source account
            $sourceAccount = $this->lookupAccount($transferData['from_account'], 'source');
            if (!$sourceAccount['success']) {
                throw new Exception("Source account validation failed: " . ($sourceAccount['error'] ?? 'Unknown error'));
            }

            // Step 2: Validate destination account
            $destAccount = $this->lookupAccount($transferData['to_account'], 'destination');
            if (!$destAccount['success']) {
                throw new Exception("Destination account validation failed: " . ($destAccount['error'] ?? 'Unknown error'));
            }

            // Step 3: Execute real IFT Transfer via NBC API
            // Build transfer request payload according to NBC API spec
            $channelRef = 'CH' . date('YmdHis') . strtoupper(substr(md5(uniqid()), 0, 6));
            
            $payload = [
                'header' => [
                    'service' => config('services.nbc_internal_fund_transfer.service_name', 'internal_ft'),
                    'extra' => [
                        'pyrName' => $transferData['sender_name'] ?? 'SACCOS User'
                    ]
                ],
                'channelId' => $this->clientId,
                'channelRef' => $channelRef,
                'creditAccount' => $transferData['to_account'],
                'creditCurrency' => $transferData['to_currency'] ?? 'TZS',
                'debitAccount' => $transferData['from_account'],
                'debitCurrency' => $transferData['from_currency'] ?? 'TZS',
                'amount' => (string) $transferData['amount'],
                'narration' => $transferData['narration'] ?? 'Internal Funds Transfer'
            ];
            
            $this->logInfo("Sending transfer request to NBC API", [
                'reference' => $reference,
                'channel_ref' => $channelRef,
                'payload' => $this->sanitizeForLogging($payload)
            ]);
            
            // Make the actual API call
            $response = $this->sendRealNBCRequest($payload);
            
            $duration = round((microtime(true) - $startTime) * 1000, 2);
            
            if ($response['success']) {
                $nbcReference = $response['data']['hostReferenceCbs'] ?? $response['data']['hostReferenceGw'] ?? $channelRef;
                
                // Save successful transaction to database
                $this->saveTransaction([
                    'reference' => $reference,
                    'type' => 'IFT',
                    'from_account' => $transferData['from_account'],
                    'to_account' => $transferData['to_account'],
                    'amount' => $transferData['amount'],
                    'status' => 'SUCCESS',
                    'response_code' => $response['data']['statusCode'] ?? '600',
                    'response_message' => $response['data']['message'] ?? 'Transfer completed successfully',
                    'nbc_reference' => $nbcReference,
                    'duration_ms' => $duration
                ]);

                $this->logInfo("IFT transfer successful via NBC API", [
                    'reference' => $reference,
                    'nbc_reference' => $nbcReference,
                    'duration_ms' => $duration
                ]);

                return [
                    'success' => true,
                    'reference' => $reference,
                    'nbc_reference' => $nbcReference,
                    'message' => $response['data']['message'] ?? 'Internal transfer completed successfully',
                    'from_account' => $transferData['from_account'],
                    'to_account' => $transferData['to_account'],
                    'amount' => $transferData['amount'],
                    'timestamp' => Carbon::now()->toIso8601String(),
                    'response_time' => $duration,
                    'api_response' => $response['data']
                ];
            } else {
                throw new Exception($response['message'] ?? 'Transfer failed');
            }

        } catch (Exception $e) {
            $this->logError("IFT transfer failed", [
                'reference' => $reference,
                'error' => $e->getMessage(),
                'duration_ms' => round((microtime(true) - $startTime) * 1000, 2)
            ]);

            // Save failed transaction
            $this->saveTransaction([
                'reference' => $reference,
                'type' => 'IFT',
                'from_account' => $transferData['from_account'] ?? '',
                'to_account' => $transferData['to_account'] ?? '',
                'amount' => $transferData['amount'] ?? 0,
                'status' => 'FAILED',
                'error_message' => $e->getMessage(),
                'duration_ms' => round((microtime(true) - $startTime) * 1000, 2)
            ]);

            return [
                'success' => false,
                'reference' => $reference,
                'error' => $e->getMessage(),
                'timestamp' => Carbon::now()->toIso8601String()
            ];
        }
    }

    /**
     * Get transfer status
     * 
     * @param string $reference
     * @return array
     */
    public function getTransferStatus(string $reference): array
    {
        $this->logInfo("Checking transfer status", ['reference' => $reference]);

        try {
            $payload = [
                'clientRef' => $reference,
                'transferType' => 'IFT'
            ];

            $response = $this->sendRequest('/api/nbc/ift/status', $payload);

            if ($response['success']) {
                return [
                    'success' => true,
                    'reference' => $reference,
                    'status' => $response['data']['status'] ?? 'UNKNOWN',
                    'message' => $response['data']['message'] ?? '',
                    'timestamp' => $response['data']['timestamp'] ?? ''
                ];
            }

            throw new Exception($response['message'] ?? 'Status check failed');

        } catch (Exception $e) {
            $this->logError("Status check failed", [
                'reference' => $reference,
                'error' => $e->getMessage()
            ]);

            return [
                'success' => false,
                'reference' => $reference,
                'error' => $e->getMessage()
            ];
        }
    }

    /**
     * Validate account number format
     * 
     * @param string $accountNumber
     * @return bool
     */
    protected function validateAccountNumber(string $accountNumber): bool
    {
        // NBC account format validation
        if (strlen($accountNumber) < 10 || strlen($accountNumber) > 16) {
            return false;
        }

        if (!is_numeric($accountNumber)) {
            return false;
        }

        return true;
    }
    
    /**
     * Query internal account from database
     * 
     * @param string $accountNumber
     * @return array|null
     */
    private function queryInternalAccount(string $accountNumber): ?array
    {
        try {
            // Query from accounts table or internal API
            $account = \DB::table('accounts')
                ->where('account_number', $accountNumber)
                ->where('status', 'ACTIVE')
                ->first();
                
            if ($account) {
                return [
                    'account_name' => $account->account_name ?? $account->name ?? 'NBC Account Holder',
                    'branch_code' => $account->branch_code ?? substr($accountNumber, 0, 3),
                    'branch_name' => $account->branch_name ?? 'NBC Branch',
                    'status' => $account->status ?? 'ACTIVE',
                    'account_type' => $account->account_type ?? 'SAVINGS'
                ];
            }
            
            // If not in database, could call internal NBC API here
            // For now, return null if not found
            return null;
            
        } catch (\Exception $e) {
            $this->logError("Database query failed", [
                'error' => $e->getMessage()
            ]);
            return null;
        }
    }

    /**
     * Validate transfer data
     * 
     * @param array $data
     * @throws Exception
     */
    protected function validateTransferData(array $data): void
    {
        $required = ['from_account', 'to_account', 'amount'];
        
        foreach ($required as $field) {
            if (empty($data[$field])) {
                throw new Exception("Missing required field: {$field}");
            }
        }

        if (!is_numeric($data['amount']) || $data['amount'] <= 0) {
            throw new Exception("Invalid amount");
        }

        if ($data['from_account'] === $data['to_account']) {
            throw new Exception("Source and destination accounts cannot be the same");
        }
    }

    /**
     * Send HTTP request to NBC API (for general endpoints)
     * 
     * @param string $endpoint
     * @param array $payload
     * @return array
     */
    protected function sendRequest(string $endpoint, array $payload): array
    {
        try {
            $url = $this->baseUrl . $endpoint;
            
            $this->logDebug("Sending request", [
                'url' => $url,
                'payload' => $payload
            ]);

            $response = Http::withHeaders([
                'Content-Type' => 'application/json',
                'x-api-key' => $this->apiKey,  // lowercase as per NBC documentation
                'Client-Id' => $this->clientId,
                'Service-Name' => 'IFT'
            ])->withOptions(['verify' => config('services.nbc_internal_fund_transfer.verify_ssl', false)])
              ->timeout(config('services.nbc_internal_fund_transfer.timeout', 30))
              ->post($url, $payload);

            $statusCode = $response->status();
            $responseData = $response->json() ?? [];

            $this->logDebug("Response received", [
                'status_code' => $statusCode,
                'response' => $responseData
            ]);

            if ($statusCode === 200 || $statusCode === 201) {
                return [
                    'success' => true,
                    'data' => $responseData
                ];
            }

            return [
                'success' => false,
                'message' => $responseData['message'] ?? "Request failed with status {$statusCode}"
            ];

        } catch (Exception $e) {
            $this->logError("Request failed", [
                'endpoint' => $endpoint,
                'error' => $e->getMessage()
            ]);

            return [
                'success' => false,
                'message' => $e->getMessage()
            ];
        }
    }

    /**
     * Send real NBC Internal Fund Transfer request with proper authentication
     * 
     * @param array $payload
     * @return array
     */
    protected function sendRealNBCRequest(array $payload): array
    {
        try {
            // Construct the URL using base URL and service name
            $serviceName = config('services.nbc_internal_fund_transfer.service_name', 'internal_ft');
            $url = rtrim($this->baseUrl, '/') . '/' . ltrim($serviceName, '/');
            
            // Generate authentication headers
            $headers = $this->generateNBCHeaders($payload);
            
            $this->logDebug("Sending NBC IFT request", [
                'url' => $url,
                'headers' => array_diff_key($headers, array_flip(['NBC-Authorization', 'Signature'])), // Log headers except sensitive ones
                'payload' => $this->sanitizeForLogging($payload)
            ]);

            $response = Http::withHeaders($headers)
                ->withOptions([
                    'verify' => config('services.nbc_internal_fund_transfer.verify_ssl', false)
                ])
                ->timeout(config('services.nbc_internal_fund_transfer.timeout', 30))
                ->post($url, $payload);

            $statusCode = $response->status();
            $responseData = $response->json() ?? [];

            $this->logDebug("NBC API response received", [
                'status_code' => $statusCode,
                'response' => $this->sanitizeForLogging($responseData)
            ]);

            // Check NBC specific status codes
            if ($statusCode === 200 || $statusCode === 201) {
                $nbcStatusCode = $responseData['statusCode'] ?? null;
                
                if ($nbcStatusCode == 600) { // NBC success code
                    return [
                        'success' => true,
                        'data' => array_merge($responseData, ['body' => $responseData['body'] ?? []])
                    ];
                } else {
                    return [
                        'success' => false,
                        'message' => $this->getNBCErrorMessage($nbcStatusCode),
                        'data' => $responseData
                    ];
                }
            }

            return [
                'success' => false,
                'message' => "Request failed with HTTP status {$statusCode}",
                'data' => $responseData
            ];

        } catch (Exception $e) {
            $this->logError("NBC API request failed", [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            return [
                'success' => false,
                'message' => 'Connection to NBC service failed: ' . $e->getMessage()
            ];
        }
    }

    /**
     * Generate NBC authentication headers
     * 
     * @param array $payload
     * @return array
     */
    protected function generateNBCHeaders(array $payload): array
    {
        $username = config('services.nbc_internal_fund_transfer.username');
        $password = config('services.nbc_internal_fund_transfer.password');
        $privateKeyPath = config('services.nbc_internal_fund_transfer.private_key');
        
        $headers = [
            'Content-Type' => 'application/json',
            'Accept' => 'application/json',
            'x-api-key' => $this->apiKey  // lowercase as per NBC documentation
        ];
        
        // Add Basic Authentication
        if ($username && $password) {
            $basicAuth = base64_encode($username . ':' . $password);
            $headers['NBC-Authorization'] = 'Basic ' . $basicAuth;
        }
        
        // Generate digital signature if private key exists
        if ($privateKeyPath) {
            try {
                $signature = $this->generateDigitalSignature($payload, $privateKeyPath);
                $headers['Signature'] = $signature;
            } catch (Exception $e) {
                $this->logWarning("Failed to generate signature", ['error' => $e->getMessage()]);
            }
        }
        
        return $headers;
    }

    /**
     * Generate digital signature for NBC API
     * 
     * @param array $payload
     * @param string $privateKeyPath
     * @return string
     */
    protected function generateDigitalSignature(array $payload, string $privateKeyPath): string
    {
        $payloadString = json_encode($payload, JSON_UNESCAPED_SLASHES);
        
        // Load private key
        $privateKey = openssl_pkey_get_private($privateKeyPath);
        if (!$privateKey) {
            throw new Exception('Failed to load private key');
        }
        
        // Generate signature
        $signature = '';
        if (!openssl_sign($payloadString, $signature, $privateKey, OPENSSL_ALGO_SHA256)) {
            throw new Exception('Failed to generate signature');
        }
        
        return base64_encode($signature);
    }

    /**
     * Get NBC error message by status code
     * 
     * @param int|null $statusCode
     * @return string
     */
    protected function getNBCErrorMessage(?int $statusCode): string
    {
        $messages = [
            626 => 'Transaction Failed',
            625 => 'No Response from CBS',
            630 => 'Currency account combination does not match',
            631 => 'Biller not defined',
            700 => 'General Failure'
        ];
        
        return $messages[$statusCode] ?? 'Unknown error (Code: ' . $statusCode . ')';
    }

    /**
     * Sanitize data for logging
     * 
     * @param mixed $data
     * @return mixed
     */
    protected function sanitizeForLogging($data)
    {
        if (!is_array($data)) {
            return $data;
        }
        
        $sanitized = $data;
        
        // Mask sensitive fields
        $sensitiveFields = ['creditAccount', 'debitAccount', 'pyrName'];
        foreach ($sensitiveFields as $field) {
            if (isset($sanitized[$field])) {
                $value = $sanitized[$field];
                if (strlen($value) > 4) {
                    $sanitized[$field] = substr($value, 0, 2) . str_repeat('*', strlen($value) - 4) . substr($value, -2);
                } else {
                    $sanitized[$field] = str_repeat('*', strlen($value));
                }
            }
        }
        
        // Recursively sanitize nested arrays
        foreach ($sanitized as $key => $value) {
            if (is_array($value)) {
                $sanitized[$key] = $this->sanitizeForLogging($value);
            }
        }
        
        return $sanitized;
    }

    /**
     * Generate unique reference
     * 
     * @param string $prefix
     * @return string
     */
    protected function generateReference(string $prefix = 'IFT'): string
    {
        // NBC API requires alphanumeric clientRef only (no underscores or special chars)
        return $prefix . date('YmdHis') . strtoupper(substr(md5(uniqid()), 0, 6));
    }
    
    /**
     * Generate UUID
     */
    protected function generateUUID(): string
    {
        return sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
            mt_rand(0, 0xffff), mt_rand(0, 0xffff),
            mt_rand(0, 0xffff),
            mt_rand(0, 0x0fff) | 0x4000,
            mt_rand(0, 0x3fff) | 0x8000,
            mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff)
        );
    }

    /**
     * Save transaction to database
     * 
     * @param array $data
     */
    protected function saveTransaction(array $data): void
    {
        try {
            DB::table('transactions')->insert([
                'transaction_uuid' => $this->generateUUID(),
                'reference' => $data['reference'],
                'type' => $data['type'],
                'transaction_category' => 'TRANSFER',
                'transaction_subcategory' => 'IFT',
                'amount' => $data['amount'],
                'currency' => 'TZS',
                'status' => $data['status'],
                'external_system' => 'NBC_INTERNAL',
                'external_system_version' => 'v1',
                'external_transaction_id' => $data['nbc_reference'] ?? $data['reference'],
                'external_status_code' => $data['response_code'] ?? null,
                'external_status_message' => $data['response_message'] ?? null,
                'error_message' => $data['error_message'] ?? null,
                'processing_time_ms' => isset($data['duration_ms']) ? round($data['duration_ms']) : null,
                'source' => 'IFT_SERVICE',
                'narration' => sprintf('Internal transfer from %s to %s', 
                    $data['from_account'], 
                    $data['to_account']
                ),
                'metadata' => json_encode([
                    'from_account' => $data['from_account'],
                    'to_account' => $data['to_account']
                ]),
                'initiated_at' => now(),
                'processed_at' => $data['status'] !== 'PENDING' ? now() : null,
                'completed_at' => $data['status'] === 'SUCCESS' ? now() : null,
                'failed_at' => $data['status'] === 'FAILED' ? now() : null,
                'created_at' => now(),
                'updated_at' => now()
            ]);
        } catch (Exception $e) {
            $this->logError("Failed to save transaction", [
                'error' => $e->getMessage(),
                'data' => $data
            ]);
        }
    }

    /**
     * Log information
     */
    protected function logInfo(string $message, array $context = []): void
    {
        Log::channel('payments')->info("[IFT] {$message}", $context);
    }

    /**
     * Log error
     */
    protected function logError(string $message, array $context = []): void
    {
        Log::channel('payments')->error("[IFT] {$message}", $context);
    }

    /**
     * Log debug information
     */
    protected function logDebug(string $message, array $context = []): void
    {
        Log::channel('payments')->debug("[IFT] {$message}", $context);
    }

    /**
     * Log warning
     */
    protected function logWarning(string $message, array $context = []): void
    {
        Log::channel('payments')->warning("[IFT] {$message}", $context);
    }
}