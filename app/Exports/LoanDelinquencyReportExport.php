<?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\FromArray;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\WithColumnWidths;
use Maatwebsite\Excel\Concerns\WithTitle;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Events\AfterSheet;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Fill;

class LoanDelinquencyReportExport implements FromArray, WithHeadings, WithStyles, WithColumnWidths, WithTitle, WithEvents
{
    protected $reportData;
    protected $reportDate;

    public function __construct($reportData, $reportDate)
    {
        $this->reportData = $reportData;
        $this->reportDate = $reportDate;
    }

    public function array(): array
    {
        $data = [];
        
        // Add report header
        $data[] = ['LOAN DELINQUENCY REPORT'];
        $data[] = ['Report Date', $this->reportData['period']['end_date']];
        $data[] = ['Generated On', $this->reportData['generated_at']];
        $data[] = ['Generated By', $this->reportData['generated_by']];
        $data[] = []; // Empty row
        
        // Add delinquency summary
        $data[] = ['DELINQUENCY SUMMARY'];
        $data[] = ['Total Delinquent Amount', number_format($this->reportData['delinquency_summary']['total_delinquent_amount'], 2) . ' TZS'];
        $data[] = ['Total Loan Portfolio', number_format($this->reportData['delinquency_summary']['total_loan_portfolio'], 2) . ' TZS'];
        $data[] = ['Delinquency Rate', number_format($this->reportData['delinquency_summary']['delinquency_rate'], 2) . '%'];
        $data[] = ['Number of Delinquent Loans', $this->reportData['delinquency_summary']['number_of_delinquent_loans']];
        $data[] = ['Total Loans', $this->reportData['delinquency_summary']['total_loans']];
        $data[] = ['Current Loans', $this->reportData['delinquency_summary']['current_loans']];
        $data[] = []; // Empty row
        
        // Add delinquency by age
        $data[] = ['DELINQUENCY BY AGE'];
        $data[] = ['Age Category', 'Amount (TZS)', 'Percentage of Total Delinquent'];
        foreach ($this->reportData['delinquency_by_age'] as $age => $amount) {
            $percentage = $this->reportData['delinquency_summary']['total_delinquent_amount'] > 0 ? 
                number_format(($amount / $this->reportData['delinquency_summary']['total_delinquent_amount']) * 100, 1) : 0;
            $data[] = [
                $age,
                number_format($amount, 2),
                $percentage . '%'
            ];
        }
        $data[] = []; // Empty row
        
        // Add detailed delinquent loans
        $data[] = ['DETAILED DELINQUENT LOANS'];
        $data[] = [
            'Loan ID',
            'Client Name',
            'Client Number',
            'Phone',
            'Email',
            'Address',
            'Loan Officer',
            'Original Amount',
            'Interest Rate',
            'Loan Term',
            'Disbursement Date',
            'Outstanding Balance',
            'Overdue Amount',
            'Last Due Date',
            'Days Past Due',
            'Delinquency Status',
            'Overdue Installments',
            'Last Payment Date',
            'Last Payment Amount',
            'Guarantor Name',
            'Guarantor Phone',
            'Collateral Type',
            'Collateral Value',
            'Delinquency Reason'
        ];
        
        foreach ($this->reportData['delinquent_loans'] as $loan) {
            $data[] = [
                $loan['loan_id'],
                $loan['client_name'] ?: $loan['business_name'],
                $loan['client_number'],
                $loan['client_phone'],
                $loan['client_email'],
                $loan['client_address'],
                $loan['loan_officer'],
                number_format($loan['original_loan_amount'], 2),
                $loan['interest_rate'] ? $loan['interest_rate'] . '%' : 'N/A',
                $loan['loan_term'] ? $loan['loan_term'] . ' months' : 'N/A',
                $loan['disbursement_date'] ? \Carbon\Carbon::parse($loan['disbursement_date'])->format('M d, Y') : 'N/A',
                number_format($loan['outstanding_balance'], 2),
                number_format($loan['overdue_amount'], 2),
                \Carbon\Carbon::parse($loan['last_due_date'])->format('M d, Y'),
                $loan['days_past_due'],
                $loan['delinquency_status'],
                $loan['overdue_installments'],
                $loan['last_payment_date'] ? \Carbon\Carbon::parse($loan['last_payment_date'])->format('M d, Y') : 'No payments',
                number_format($loan['last_payment_amount'], 2),
                $loan['guarantor_name'] ?: 'N/A',
                $loan['guarantor_phone'] ?: 'N/A',
                $loan['collateral_type'] ?: 'N/A',
                $loan['collateral_value'] ? number_format($loan['collateral_value'], 2) : 'N/A',
                $loan['delinquency_reason']
            ];
        }
        
        return $data;
    }

    public function headings(): array
    {
        return [];
    }

    public function title(): string
    {
        return 'Loan Delinquency Report';
    }

    public function columnWidths(): array
    {
        return [
            'A' => 15,  // Loan ID
            'B' => 25,  // Client Name
            'C' => 15,  // Client Number
            'D' => 15,  // Phone
            'E' => 25,  // Email
            'F' => 30,  // Address
            'G' => 20,  // Loan Officer
            'H' => 18,  // Original Amount
            'I' => 15,  // Interest Rate
            'J' => 15,  // Loan Term
            'K' => 18,  // Disbursement Date
            'L' => 18,  // Outstanding Balance
            'M' => 18,  // Overdue Amount
            'N' => 18,  // Last Due Date
            'O' => 15,  // Days Past Due
            'P' => 20,  // Delinquency Status
            'Q' => 20,  // Overdue Installments
            'R' => 18,  // Last Payment Date
            'S' => 18,  // Last Payment Amount
            'T' => 20,  // Guarantor Name
            'U' => 15,  // Guarantor Phone
            'V' => 20,  // Collateral Type
            'W' => 18,  // Collateral Value
            'X' => 30,  // Delinquency Reason
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            // Style the first row (title)
            1 => [
                'font' => [
                    'bold' => true,
                    'size' => 16,
                ],
                'alignment' => [
                    'horizontal' => Alignment::HORIZONTAL_CENTER,
                ],
            ],
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function(AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();
                
                // Style headers and sections
                $this->styleHeaders($sheet);
                $this->styleSections($sheet);
                $this->addBorders($sheet);
            },
        ];
    }

    private function styleHeaders($sheet)
    {
        // Style section headers
        $sectionHeaders = ['LOAN DELINQUENCY REPORT', 'DELINQUENCY SUMMARY', 'DELINQUENCY BY AGE', 'DETAILED DELINQUENT LOANS'];
        
        foreach ($sectionHeaders as $header) {
            $row = $this->findRowByText($sheet, $header);
            if ($row) {
                $sheet->getStyle("A{$row}")->applyFromArray([
                    'font' => [
                        'bold' => true,
                        'size' => 14,
                        'color' => ['rgb' => 'FFFFFF'],
                    ],
                    'fill' => [
                        'fillType' => Fill::FILL_SOLID,
                        'startColor' => ['rgb' => '366092'], // Red color for delinquency
                    ],
                    'alignment' => [
                        'horizontal' => Alignment::HORIZONTAL_CENTER,
                    ],
                ]);
            }
        }
    }

    private function styleSections($sheet)
    {
        // Style column headers for detailed loan data
        $headerRow = $this->findRowByText($sheet, 'DETAILED DELINQUENT LOANS') + 1;
        if ($headerRow) {
            $sheet->getStyle("A{$headerRow}:X{$headerRow}")->applyFromArray([
                'font' => [
                    'bold' => true,
                    'color' => ['rgb' => 'FFFFFF'],
                ],
                'fill' => [
                    'fillType' => Fill::FILL_SOLID,
                    'startColor' => ['rgb' => '366092'], // Darker red for headers
                ],
                'alignment' => [
                    'horizontal' => Alignment::HORIZONTAL_CENTER,
                ],
            ]);
        }
    }

    private function addBorders($sheet)
    {
        $highestRow = $sheet->getHighestRow();
        $highestColumn = $sheet->getHighestColumn();
        
        $sheet->getStyle("A1:{$highestColumn}{$highestRow}")->applyFromArray([
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['rgb' => '000000'],
                ],
            ],
        ]);
    }

    private function findRowByText($sheet, $text)
    {
        $highestRow = $sheet->getHighestRow();
        
        for ($row = 1; $row <= $highestRow; $row++) {
            $cellValue = $sheet->getCell("A{$row}")->getValue();
            if ($cellValue === $text) {
                return $row;
            }
        }
        
        return null;
    }
}
