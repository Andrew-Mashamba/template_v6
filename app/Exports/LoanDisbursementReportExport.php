<?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\FromArray;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\WithColumnWidths;
use Maatwebsite\Excel\Concerns\WithTitle;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Events\AfterSheet;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Fill;

class LoanDisbursementReportExport implements FromArray, WithHeadings, WithStyles, WithColumnWidths, WithTitle, WithEvents
{
    protected $reportData;
    protected $reportDate;

    public function __construct($reportData, $reportDate)
    {
        $this->reportData = $reportData;
        $this->reportDate = $reportDate;
    }

    public function array(): array
    {
        $data = [];
        
        // Add report header
        $data[] = ['LOAN DISBURSEMENT REPORT'];
        $data[] = ['Report Period', $this->reportData['period']['start_date'] . ' to ' . $this->reportData['period']['end_date']];
        $data[] = ['Generated On', now()->format('F d, Y \a\t g:i A')];
        $data[] = ['Generated By', auth()->user()->name ?? 'System'];
        $data[] = []; // Empty row
        
        // Add disbursement summary
        $data[] = ['DISBURSEMENT SUMMARY'];
        $data[] = ['Total Disbursed', number_format($this->reportData['disbursement_summary']['total_disbursed'], 2) . ' TZS'];
        $data[] = ['Number of Disbursements', $this->reportData['disbursement_summary']['number_of_disbursements']];
        $data[] = ['Average Disbursement', number_format($this->reportData['disbursement_summary']['average_disbursement'], 2) . ' TZS'];
        $data[] = ['Largest Disbursement', number_format($this->reportData['disbursement_summary']['largest_disbursement'], 2) . ' TZS'];
        $data[] = ['Smallest Disbursement', number_format($this->reportData['disbursement_summary']['smallest_disbursement'], 2) . ' TZS'];
        $data[] = []; // Empty row
        
        // Add disbursements by type
        if (!empty($this->reportData['disbursements_by_type'])) {
            $data[] = ['DISBURSEMENTS BY LOAN TYPE'];
            $data[] = ['Loan Type', 'Number of Disbursements', 'Total Amount (TZS)', 'Average Amount (TZS)', 'Percentage'];
            foreach ($this->reportData['disbursements_by_type'] as $type => $typeData) {
                $percentage = $this->reportData['disbursement_summary']['total_disbursed'] > 0 ? 
                    number_format(($typeData['amount'] / $this->reportData['disbursement_summary']['total_disbursed']) * 100, 1) : 0;
                $data[] = [
                    $type,
                    $typeData['count'],
                    number_format($typeData['amount'], 2),
                    number_format($typeData['amount'] / $typeData['count'], 2),
                    $percentage . '%'
                ];
            }
            $data[] = []; // Empty row
        }
        
        // Add daily trend
        if (!empty($this->reportData['daily_trend'])) {
            $data[] = ['DAILY DISBURSEMENT TREND'];
            $data[] = ['Date', 'Number of Disbursements', 'Total Amount (TZS)'];
            foreach ($this->reportData['daily_trend'] as $trend) {
                $data[] = [
                    $trend['date'],
                    $trend['count'],
                    number_format($trend['amount'], 2)
                ];
            }
            $data[] = []; // Empty row
        }
        
        // Add detailed disbursements
        $data[] = ['DETAILED DISBURSEMENTS'];
        $data[] = [
            'Date',
            'Loan ID',
            'Client Number',
            'Business Name',
            'Amount (TZS)',
            'Loan Type',
            'Interest Rate (%)',
            'Disbursement Method',
            'Net Amount (TZS)',
            'Total Deductions (TZS)'
        ];
        
        foreach ($this->reportData['disbursements'] as $disbursement) {
            $data[] = [
                \Carbon\Carbon::parse($disbursement->disbursement_date)->format('M d, Y'),
                $disbursement->loan_id,
                $disbursement->client_number,
                $disbursement->business_name,
                number_format($disbursement->principle, 2),
                $disbursement->loan_type_2,
                number_format($disbursement->interest, 2),
                $disbursement->disbursement_method ?? 'Cash',
                number_format($disbursement->net_disbursement_amount ?? $disbursement->principle, 2),
                number_format($disbursement->total_deductions ?? 0, 2)
            ];
        }
        
        return $data;
    }

    public function headings(): array
    {
        return [];
    }

    public function title(): string
    {
        return 'Loan Disbursement Report';
    }

    public function columnWidths(): array
    {
        return [
            'A' => 15,  // Date
            'B' => 15,  // Loan ID
            'C' => 15,  // Client Number
            'D' => 25,  // Business Name
            'E' => 18,  // Amount
            'F' => 20,  // Loan Type
            'G' => 15,  // Interest Rate
            'H' => 18,  // Disbursement Method
            'I' => 18,  // Net Amount
            'J' => 18,  // Total Deductions
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            // Style the first row (title)
            1 => [
                'font' => [
                    'bold' => true,
                    'size' => 16,
                ],
                'alignment' => [
                    'horizontal' => Alignment::HORIZONTAL_CENTER,
                ],
            ],
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function(AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();
                
                // Style headers and sections
                $this->styleHeaders($sheet);
                $this->styleSections($sheet);
                $this->addBorders($sheet);
            },
        ];
    }

    private function styleHeaders($sheet)
    {
        // Style section headers
        $sectionHeaders = [
            'LOAN DISBURSEMENT REPORT', 
            'DISBURSEMENT SUMMARY', 
            'DISBURSEMENTS BY LOAN TYPE', 
            'DAILY DISBURSEMENT TREND',
            'DETAILED DISBURSEMENTS'
        ];
        
        foreach ($sectionHeaders as $header) {
            $row = $this->findRowByText($sheet, $header);
            if ($row) {
                $sheet->getStyle("A{$row}")->applyFromArray([
                    'font' => [
                        'bold' => true,
                        'size' => 14,
                        'color' => ['rgb' => 'FFFFFF'],
                    ],
                    'fill' => [
                        'fillType' => Fill::FILL_SOLID,
                        'startColor' => ['rgb' => '366092'], // Blue color for disbursement
                    ],
                    'alignment' => [
                        'horizontal' => Alignment::HORIZONTAL_CENTER,
                    ],
                ]);
            }
        }
    }

    private function styleSections($sheet)
    {
        // Style column headers for detailed disbursement data
        $headerRow = $this->findRowByText($sheet, 'DETAILED DISBURSEMENTS') + 1;
        if ($headerRow) {
            $sheet->getStyle("A{$headerRow}:J{$headerRow}")->applyFromArray([
                'font' => [
                    'bold' => true,
                    'color' => ['rgb' => 'FFFFFF'],
                ],
                'fill' => [
                    'fillType' => Fill::FILL_SOLID,
                    'startColor' => ['rgb' => '366092'], // Darker blue for headers
                ],
                'alignment' => [
                    'horizontal' => Alignment::HORIZONTAL_CENTER,
                ],
            ]);
        }
    }

    private function addBorders($sheet)
    {
        $highestRow = $sheet->getHighestRow();
        $highestColumn = $sheet->getHighestColumn();
        
        $sheet->getStyle("A1:{$highestColumn}{$highestRow}")->applyFromArray([
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['rgb' => '000000'],
                ],
            ],
        ]);
    }

    private function findRowByText($sheet, $text)
    {
        $highestRow = $sheet->getHighestRow();
        
        for ($row = 1; $row <= $highestRow; $row++) {
            $cellValue = $sheet->getCell("A{$row}")->getValue();
            if ($cellValue === $text) {
                return $row;
            }
        }
        
        return null;
    }
}
