<?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\FromArray;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\WithColumnWidths;
use Maatwebsite\Excel\Concerns\WithTitle;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Events\AfterSheet;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Fill;

class ActiveLoansByOfficerExport implements FromArray, WithHeadings, WithStyles, WithColumnWidths, WithTitle, WithEvents
{
    protected $loans;
    protected $summary;
    protected $selectedOfficer;
    protected $officerName;

    public function __construct($loans, $summary, $selectedOfficer = null, $officerName = null)
    {
        $this->loans = $loans;
        $this->summary = $summary;
        $this->selectedOfficer = $selectedOfficer;
        $this->officerName = $officerName;
    }

    public function array(): array
    {
        $data = [];
        
        // Add report header
        $data[] = ['ACTIVE LOANS BY OFFICER REPORT'];
        $data[] = ['Generated On', now()->format('F d, Y \a\t g:i A')];
        $data[] = ['Generated By', auth()->user()->name ?? 'System'];
        if ($this->selectedOfficer && $this->officerName) {
            $data[] = ['Filtered By Officer', $this->officerName];
        } else {
            $data[] = ['Filtered By Officer', 'All Officers'];
        }
        $data[] = []; // Empty row
        
        // Add summary statistics
        $data[] = ['SUMMARY STATISTICS'];
        $data[] = ['Total Active Loans', $this->summary['totalLoans']];
        $data[] = ['Total Loan Amount', number_format($this->summary['totalLoanAmount'], 2) . ' TZS'];
        $data[] = ['Overdue Loans', $this->summary['overdueLoans']];
        $data[] = ['Active Officers', $this->summary['activeOfficers']];
        $data[] = []; // Empty row
        
        // Add officer-specific summary if filtered
        if ($this->selectedOfficer && $this->officerName) {
            $data[] = ['OFFICER PERFORMANCE SUMMARY'];
            $data[] = ['Officer Name', $this->officerName];
            $data[] = ['Total Loans', $this->summary['officerLoans']];
            $data[] = ['Total Amount', number_format($this->summary['officerLoanAmount'], 2) . ' TZS'];
            $data[] = ['Overdue Loans', $this->summary['officerOverdueLoans']];
            $data[] = []; // Empty row
        }
        
        // Add detailed loan data
        $data[] = ['DETAILED LOAN INFORMATION'];
        $data[] = []; // Empty row
        
        // Add column headers
        $data[] = [
            'Loan ID',
            'Member Name',
            'Guarantor',
            'Branch',
            'Principle (TZS)',
            'Interest (%)',
            'Past Due Days',
            'Loan Officer',
            'Loan Status',
            'Action Status',
            'Business Name',
            'Collateral Type',
            'Collateral Value (TZS)',
            'Disbursement Date'
        ];
        
        // Add loan data
        foreach ($this->loans as $loan) {
            $data[] = [
                $loan->loan_id ?? 'N/A',
                $loan->member_name ?? 'N/A',
                $loan->guarantor_name ?? 'N/A',
                $loan->branch_name ?? 'N/A',
                number_format($loan->principle, 2),
                $loan->interest . '%',
                $loan->days_in_arrears ?? 0,
                $loan->officer_name ?? 'N/A',
                $loan->loan_status ?? 'N/A',
                $loan->status ?? 'N/A',
                $loan->business_name ?? 'N/A',
                $loan->collateral_type ?? 'N/A',
                number_format($loan->collateral_value ?? 0, 2),
                $loan->disbursement_date ? \Carbon\Carbon::parse($loan->disbursement_date)->format('Y-m-d') : 'N/A'
            ];
        }
        
        return $data;
    }

    public function headings(): array
    {
        return [];
    }

    public function title(): string
    {
        return 'Active Loans by Officer';
    }

    public function columnWidths(): array
    {
        return [
            'A' => 15, // Loan ID
            'B' => 25, // Member Name
            'C' => 25, // Guarantor
            'D' => 20, // Branch
            'E' => 15, // Principle
            'F' => 12, // Interest
            'G' => 15, // Past Due Days
            'H' => 25, // Loan Officer
            'I' => 15, // Loan Status
            'J' => 15, // Action Status
            'K' => 25, // Business Name
            'L' => 20, // Collateral Type
            'M' => 20, // Collateral Value
            'N' => 18, // Disbursement Date
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            // Header row styles
            1 => [
                'font' => [
                    'bold' => true,
                    'size' => 16,
                    'color' => ['rgb' => '366092']
                ],
                'alignment' => [
                    'horizontal' => Alignment::HORIZONTAL_CENTER,
                ],
            ],
            
            // Summary section headers
            5 => [
                'font' => [
                    'bold' => true,
                    'size' => 12,
                ],
                'fill' => [
                    'fillType' => Fill::FILL_SOLID,
                    'startColor' => ['rgb' => 'E6F3FF']
                ],
            ],
            
            // Column headers
            (count($this->loans) > 0 ? 8 + ($this->selectedOfficer ? 6 : 0) : 8) => [
                'font' => [
                    'bold' => true,
                    'size' => 11,
                ],
                'fill' => [
                    'fillType' => Fill::FILL_SOLID,
                    'startColor' => ['rgb' => 'D9E1F2']
                ],
                'alignment' => [
                    'horizontal' => Alignment::HORIZONTAL_CENTER,
                ],
                'borders' => [
                    'allBorders' => [
                        'borderStyle' => Border::BORDER_THIN,
                    ],
                ],
            ],
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function(AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();
                
                // Get the last row with data
                $lastRow = $sheet->getHighestRow();
                $lastColumn = $sheet->getHighestColumn();
                
                // Apply borders to all data cells
                $sheet->getStyle('A1:' . $lastColumn . $lastRow)->applyFromArray([
                    'borders' => [
                        'allBorders' => [
                            'borderStyle' => Border::BORDER_THIN,
                        ],
                    ],
                ]);
                
                // Auto-fit columns
                foreach (range('A', $lastColumn) as $column) {
                    $sheet->getColumnDimension($column)->setAutoSize(true);
                }
                
                // Format currency columns
                $principleColumn = 'E';
                $collateralColumn = 'M';
                
                for ($row = 9 + ($this->selectedOfficer ? 6 : 0); $row <= $lastRow; $row++) {
                    $sheet->getStyle($principleColumn . $row)->getNumberFormat()->setFormatCode('#,##0.00');
                    $sheet->getStyle($collateralColumn . $row)->getNumberFormat()->setFormatCode('#,##0.00');
                }
                
                // Highlight overdue loans
                $pastDueColumn = 'G';
                for ($row = 9 + ($this->selectedOfficer ? 6 : 0); $row <= $lastRow; $row++) {
                    $pastDueValue = $sheet->getCell($pastDueColumn . $row)->getValue();
                    if (is_numeric($pastDueValue) && $pastDueValue > 0) {
                        $sheet->getStyle('A' . $row . ':' . $lastColumn . $row)->applyFromArray([
                            'fill' => [
                                'fillType' => Fill::FILL_SOLID,
                                'startColor' => ['rgb' => 'FFE6E6']
                            ],
                        ]);
                    }
                }
            },
        ];
    }
}

